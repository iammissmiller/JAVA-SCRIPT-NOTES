Dates and Times in JavaScript

### 1. Introduction

* Dates and times are very common in real-world applications.
* In JavaScript, dates are handled using the **`Date` object**, which is a special type of object with built-in methods.
* There are **four main ways** to create a `Date`.

---

### 2. Creating Dates

#### (a) Current Date & Time

```js
const now = new Date();
console.log(now); // current date and time
```

#### (b) From a Date String

```js
const date1 = new Date('August 2, 2020');
const date2 = new Date('December 24, 2015');
```

* JavaScript parses strings into dates.
* **Unreliable** if the string is manually written.
* **Safe** if string is generated by JavaScript (e.g., ISO format).
* Example of ISO string from account movement:

```js
const date3 = new Date("2019-11-18T21:31:17.178Z"); // UTC format
```

#### (c) From Year, Month, Day, Hour, Minute, Second

```js
const future = new Date(2037, 10, 19, 15, 23, 5);
console.log(future); // Nov 19, 2037, 15:23:05
```

* **Important:** Months are **0-based** (`0 = January`, `10 = November`).
* Auto-correction:

```js
new Date(2037, 10, 33); // Dec 3, 2037 (auto-corrects overflow days)
```

#### (d) From Milliseconds (Unix Time)

* January 1, 1970 (Unix epoch) = time `0`.
* `Date` can be created using milliseconds since then.

```js
const date4 = new Date(0); // Jan 1, 1970
const date5 = new Date(3 * 24 * 60 * 60 * 1000); // Jan 4, 1970 (3 days later)
```

* This value is called a **timestamp**.

---

### 3. Working with Dates

Dates are objects, so they have methods for **getting** and **setting** components.

#### (a) Get Methods

```js
future.getFullYear(); // 2037 (preferred)
future.getMonth();    // 10 (November, 0-based)
future.getDate();     // 19 (day of the month)
future.getDay();      // 4 (day of week, 0=Sunday)
future.getHours();    // 15
future.getMinutes();  // 23
future.getSeconds();  // 5
```

* `getFullYear()` is recommended. Avoid `getYear()`.

#### (b) ISO String Format

```js
future.toISOString(); 
// "2037-11-19T15:23:00.000Z"
```

* Useful for storing and transferring dates (standardized format).

#### (c) Timestamps

```js
future.getTime(); // milliseconds since Jan 1, 1970
Date.now();       // current timestamp
```

* Timestamps are widely used for comparisons, logging, and calculations.

#### (d) Set Methods

```js
future.setFullYear(2040);
console.log(future); // Nov 19, 2040
```

* Similar methods exist: `setMonth()`, `setDate()`, `setHours()`, etc.
* They also perform **auto-correction** if values overflow (e.g., setting day to 32).

---

### 4. Key Takeaways

* Four ways to create a date:

  1. Current moment (`new Date()`),
  2. From string,
  3. From components,
  4. From milliseconds since Unix epoch.
* Dates are **objects with methods** to get, set, and format.
* **Months are zero-based** (important detail).
* **Timestamps** are the backbone of date/time handling.
* Use `.toISOString()` for safe storage and data transfer.
* Always use `getFullYear()` instead of `getYear()`.

