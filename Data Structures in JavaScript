Data Structures in JavaScript

JavaScript provides built-in data structures to organize and manage data efficiently. These are divided into two categories:


---

1. Primitive Data Structures

These hold a single value and are immutable.

Number â€“ for numeric values

String â€“ sequence of characters

Boolean â€“ true or false

Null â€“ intentional absence of value

Undefined â€“ variable declared but not assigned

Symbol â€“ unique, immutable identifier (ES6)

BigInt â€“ for large integers beyond Number limits



---

2. Non-Primitive (Complex) Data Structures

These can store collections of values and are mutable.

ðŸ”¹ Object

Key-value pairs

Can hold any data type including functions


const user = { name: "Praptee", age: 20 };

ðŸ”¹ Array

Ordered list of values (index-based)

Can hold mixed types


const fruits = ["apple", "banana", "mango"];

ðŸ”¹ Set

Collection of unique values

No duplicates allowed


const ids = new Set([1, 2, 3, 3]); // Set(3) {1, 2, 3}

ðŸ”¹ Map

Stores key-value pairs (keys can be of any type)

Maintains insertion order


const map = new Map();
map.set("name", "Praptee");


---

3. Typed Arrays

Used for handling binary data efficiently (used in advanced scenarios like WebGL, buffers, etc.)

