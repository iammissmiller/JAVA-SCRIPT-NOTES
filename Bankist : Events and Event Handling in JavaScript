Bankist : Events and Event Handling in JavaScript

### **1. What is an Event?**

An **event** is a **signal generated by the browser (DOM node)** to indicate that something has happened in the webpage.

Examples of events:

* A user **clicks** a button.
* The **mouse moves** or hovers over an element.
* A **key is pressed** on the keyboard.
* The page **loads, scrolls, or resizes**.
* The browser **enters fullscreen mode**.

**Key point:**
An event occurs whether or not we are listening for it. Event listeners only let us *react* to those events in JavaScript.

---

### **2. Event Listeners**

We use **event listeners** to make JavaScript respond to user actions.

#### Example:

```js
const h1 = document.querySelector('h1');

h1.addEventListener('mouseenter', function (e) {
  alert('Great! You are reading the heading!');
});
```

* `mouseenter` → fires when the mouse pointer enters the element.
* Similar to CSS `:hover`, but only fires once when entering (not continuously).

---

### **3. Common Event Types**

Events can be categorized into several groups. Some of the most used types include:

#### **Mouse Events**

* `click` – when the element is clicked.
* `mouseenter` – when the mouse enters the element.
* `mouseleave` – when the mouse leaves the element.
* `mousemove` – when the mouse moves inside the element.

#### **Keyboard Events**

* `keydown` – when a key is pressed.
* `keyup` – when a key is released.

#### **Form Events**

* `submit` – when a form is submitted.
* `input` – when input value changes.

#### **Window Events**

* `scroll` – when the page scrolls.
* `resize` – when the browser window resizes.
* `load` – when the page finishes loading.

(Full list available in the **MDN Web Docs: JavaScript Events Reference**.)

---

### **4. Different Ways to Attach Event Handlers**

#### **A. Using `addEventListener()` — Modern and Recommended**

```js
element.addEventListener('event', functionName);
```

Example:

```js
h1.addEventListener('mouseenter', function () {
  alert('Mouse entered the heading!');
});
```

**Advantages:**

1. Allows **multiple listeners** for the same event.
2. Can be **removed** later with `removeEventListener()`.
3. Works with modern event-handling techniques.

---

#### **B. Using the `on-event` Property — Old Way**

```js
element.onmouseenter = function() {
  alert('Mouse entered!');
};
```

* Each event type (like `click`, `mouseenter`, etc.) has a corresponding property (`onclick`, `onmouseenter`, etc.).
* **Disadvantage:** You can only attach **one** handler per event this way.
  Adding another will **overwrite** the previous one.

---

#### **C. Using Inline HTML Event Attributes — Outdated and Not Recommended**

```html
<h1 onclick="alert('HTML Alert!')">Heading</h1>
```

* JavaScript is written directly in the HTML attribute.
* This is **bad practice** because it mixes HTML and JavaScript logic.
* Shown here only for historical understanding.

---

### **5. Removing Event Listeners**

You can remove an event listener using `removeEventListener()`.

#### Example:

```js
const h1 = document.querySelector('h1');

function alertH1() {
  alert('You are reading the heading!');
  h1.removeEventListener('mouseenter', alertH1);
}

h1.addEventListener('mouseenter', alertH1);
```

* Here, the event listener removes itself after running once.
* Useful when an event should only happen a single time.

---

### **6. Removing Event Listeners After a Delay**

You can also remove a listener later using `setTimeout()`.

```js
const h1 = document.querySelector('h1');

function alertH1() {
  alert('You are reading the heading!');
}

h1.addEventListener('mouseenter', alertH1);

setTimeout(() => h1.removeEventListener('mouseenter', alertH1), 3000);
```

* After 3 seconds, the event listener will no longer work.

---

### **7. Summary Table**

| Method                    | Syntax Example                     | Multiple Listeners? | Removable? | Recommended?      |
| ------------------------- | ---------------------------------- | ------------------- | ---------- | ----------------- |
| **addEventListener()**    | `el.addEventListener('click', fn)` | ✅ Yes               | ✅ Yes      | ✅ Yes             |
| **on-event Property**     | `el.onclick = fn`                  | ❌ No                | ❌ No       | ⚠️ Outdated       |
| **Inline HTML Attribute** | `<button onclick="fn()">`          | ❌ No                | ❌ No       | ❌ Not Recommended |

---

### **8. Key Takeaways**

* **Events** are signals that something happened in the browser.
* **Event listeners** let us respond to those signals using JavaScript.
* Always use `addEventListener()` for flexibility and modern best practices.
* You can remove event listeners to control when and how your app responds.
* Avoid inline or `on-event` properties in production code.


