Bankist : Math Operations and Rounding in JavaScript

## 1. Common Mathematical Operations

* Already known: `+`, `-`, `*`, `/`, `**` (exponentiation).

---

## 2. Square Roots and Exponentiation

* **Square root**:

  ```js
  Math.sqrt(25); // 5
  ```
* **Exponentiation alternative**:

  ```js
  25 ** (1 / 2); // 5 (square root)
  8 ** (1 / 3);  // 2 (cube root)
  ```

---

## 3. Max and Min

* Find largest/smallest among values:

  ```js
  Math.max(5, 18, 23, 11, 2); // 23
  Math.min(5, 18, 23, 11, 2); // 2
  ```
* **Type coercion** works (strings converted if valid):

  ```js
  Math.max(23, '18'); // 23
  ```
* **No parsing**: invalid values → `NaN`.

  ```js
  Math.max(23, '18px'); // NaN
  ```

---

## 4. Constants in `Math`

* **PI**:

  ```js
  Math.PI; // 3.14159...
  ```
* Example: **Area of circle** with radius `r`:

  ```js
  const radius = parseFloat('10px');
  const area = Math.PI * radius ** 2;
  ```

---

## 5. Random Numbers

* **Basic**:

  ```js
  Math.random(); // Between 0 and 1
  ```
* **Dice roll (1–6)**:

  ```js
  Math.trunc(Math.random() * 6) + 1;
  ```

### General Random Integer Function

```js
const randomInt = (min, max) =>
  Math.floor(Math.random() * (max - min + 1)) + min;

randomInt(10, 20); // Random number between 10 and 20
randomInt(0, 3);   // Random number between 0 and 3
```

* Uses `Math.floor` (safer than `Math.trunc`, especially for negative ranges).

---

## 6. Rounding Integers

* **Truncate** (remove decimals):

  ```js
  Math.trunc(23.9); // 23
  ```
* **Round to nearest integer**:

  ```js
  Math.round(23.9); // 24
  Math.round(23.3); // 23
  ```
* **Ceil (round up)**:

  ```js
  Math.ceil(23.1); // 24
  Math.ceil(23.9); // 24
  ```
* **Floor (round down)**:

  ```js
  Math.floor(23.9); // 23
  Math.floor(23.1); // 23
  ```

**Difference between `Math.trunc` and `Math.floor`:**

* For positive numbers → same result.
* For negative numbers → different:

  ```js
  Math.trunc(-23.9); // -23
  Math.floor(-23.9); // -24
  ```
* **Recommendation**: Use `Math.floor` (more consistent).

---

## 7. Rounding Decimals

* Use **`.toFixed(digits)`**
* Returns a **string**, not a number.

  ```js
  (2.345).toFixed(2); // "2.35"
  (+2.345).toFixed(2); // "2.35" (convert string → number using +)
  ```
* Pads trailing zeros:

  ```js
  (2.7).toFixed(3); // "2.700"
  (2.9).toFixed(0); // "3"
  ```

---

## 8. Practical Use Cases

* **Bank loan rounding**: Round down loan requests.

  ```js
  const loan = Math.floor(value);
  ```
* **Display formatting**: Always show 2 decimals in financial apps.

  ```js
  balance.toFixed(2);
  ```

---

## 9. Key Takeaways

* `Math.sqrt`, `**` → roots.
* `Math.max`, `Math.min` → comparisons (no parsing).
* `Math.PI` → circle calculations.
* `Math.random` + formula → flexible random number generator.
* `Math.floor` vs `Math.trunc`: prefer floor for reliability.
* `.toFixed()` → format decimals, returns string.

