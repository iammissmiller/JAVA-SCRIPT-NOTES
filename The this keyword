The this Keyword in JavaScript

The this keyword refers to the object that is executing the current function. Its value depends on how a function is called, not where itâ€™s written.


---

1. Global Context

In the global scope (outside any function), this refers to the global object:

In browsers: window

In Node.js: global


console.log(this); // window (in browsers)


---

2. Inside a Regular Function

When used inside a regular function, this refers to:

The global object in non-strict mode

undefined in strict mode


function show() {
  console.log(this);
}
show(); // window (non-strict), undefined (strict)


---

3. Inside a Method

When a function is called as a method of an object, this refers to the object:

const user = {
  name: "Praptee",
  greet: function () {
    console.log(this.name); // refers to user object
  },
};
user.greet(); // Praptee


---

4. Arrow Functions

Arrow functions do not have their own this. They inherit this from their surrounding (lexical) scope.

const obj = {
  name: "Praptee",
  greet: () => {
    console.log(this.name); // undefined (or window.name)
  },
};
obj.greet();


---

5. Explicit Binding

You can set this manually using:

call(), apply(), bind()


function greet() {
  console.log(this.name);
}
const person = { name: "Alice" };
greet.call(person); // Alice
