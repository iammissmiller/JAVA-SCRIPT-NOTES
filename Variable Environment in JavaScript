Variable Environment in JavaScript

The Variable Environment is a key part of the execution context in JavaScript. It is where variables, function declarations, and arguments are stored during the execution of code.

Each execution context (global or function) has its own variable environment.

Components of Variable Environment:

1. Variable Declarations

Variables declared with var are hoisted and stored in the variable environment during the creation phase of the execution context.

They are initialized with undefined until assigned.



2. Function Declarations

Fully hoisted during the creation phase.

Stored as actual functions in the environment, not undefined.



3. Arguments Object (for functions)

When a function is called, all passed arguments are stored in the variable environment.

Accessible via the special arguments object.




Example:

function greet(name) {
  var message = "Hello " + name;
  return message;
}
greet("Alice");

For the function greet, the variable environment would include:

name = "Alice" (from arguments)

message = "Hello Alice"



---

Variable Environment vs Lexical Environment

Variable Environment = current functionâ€™s variables + arguments + function declarations.

Lexical Environment = similar, but also includes outer environment references (used for scope chain lookup).


> In modern JavaScript, the term Lexical Environment is used more often, and it includes both the variable environment and outer environment reference.

