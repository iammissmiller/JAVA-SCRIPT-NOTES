Scope and Scope Chain

Scope

In JavaScript, scope refers to the accessible environment for variables and functions. It determines where variables can be used or accessed in your code.

There are three types of scope:

1. Global Scope

Variables declared outside any function or block.

Accessible anywhere in the code.


let x = 10; // global scope


2. Function (Local) Scope

Variables declared inside a function.

Only accessible within that function.


function test() {
  let y = 5; // function scope
}


3. Block Scope (introduced with let and const)

Variables declared inside {} (like in loops or conditionals).

Only accessible within that block.


if (true) {
  let z = 20; // block scope
}



> var does not have block scope — only function or global scope.




---

Scope Chain

The scope chain is the hierarchy of scopes that the JavaScript engine follows to resolve variable references.

When a variable is used, JavaScript looks:

1. In the current scope.


2. If not found, it moves to the outer scope (parent).


3. Continues moving outward until it finds the variable or reaches the global scope.



If the variable is not found, a ReferenceError is thrown.

Example:

let a = 1;
function outer() {
  let b = 2;
  function inner() {
    let c = 3;
    console.log(a, b, c); // has access to all three
  }
  inner();
}
outer();

Here, inner() has access to c, b, and a — this is due to the scope chain.


---
