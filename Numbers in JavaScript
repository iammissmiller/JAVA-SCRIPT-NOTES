Numbers in JavaScript

## 1. Representation of Numbers

* JavaScript uses **floating-point numbers (64-bit, base 2)** for all numbers.
* There is **only one number type** in JavaScript, no separate `int` or `float`.
* Example:

  ```js
  console.log(23 === 23.0); // true
  ```
* Numbers are stored in **binary** → this leads to precision issues.

  * Example:

    ```js
    console.log(0.1 + 0.2); // 0.30000000000000004
    ```

**Reason**: Some fractions (like 0.1) cannot be represented exactly in base 2.

---

## 2. Precision Problems

* Example issue:

  ```js
  console.log(0.1 + 0.2 === 0.3); // false
  ```
* This is a limitation of floating-point representation, not unique to JavaScript (common in languages like PHP, Ruby, etc.).
* Implication: Avoid using JavaScript for **high-precision financial or scientific calculations**.

---

## 3. Converting Strings to Numbers

### A. Using `Number()`

```js
console.log(Number('23')); // 23
```

### B. Using Unary Plus (`+`)

* A shorthand for type coercion.

```js
console.log(+'23'); // 23
```

* Cleaner and often preferred.

---

## 4. Parsing Numbers from Strings

* Used when strings contain extra characters (e.g., units like `"30px"`).

### `Number.parseInt()`

* Extracts integer part.
* Requires the string to **start with a number**.
* Supports radix (base).

```js
console.log(Number.parseInt('30px', 10)); // 30
console.log(Number.parseInt('e23', 10));  // NaN
```

### `Number.parseFloat()`

* Extracts floating-point number.

```js
console.log(Number.parseFloat('2.5rem')); // 2.5
console.log(Number.parseInt('2.5rem'));   // 2
```

**Best Practice**: Always specify the radix (usually `10`) when using `parseInt`.

---

## 5. Checking if a Value is a Number

### `Number.isNaN()`

* Checks if a value is exactly `NaN`.

```js
console.log(Number.isNaN(20));      // false
console.log(Number.isNaN('20'));    // false
console.log(Number.isNaN(+'20X'));  // true (invalid conversion)
```

* **Limitation**: Does not detect `Infinity`.

---

### `Number.isFinite()` → Recommended

* Best way to check if a value is a valid number.

```js
console.log(Number.isFinite(20));       // true
console.log(Number.isFinite('20'));     // false
console.log(Number.isFinite(23 / 0));   // false (Infinity)
```

---

### `Number.isInteger()`

* Specifically checks for integers.

```js
console.log(Number.isInteger(23));   // true
console.log(Number.isInteger(23.0)); // true
console.log(Number.isInteger(23.1)); // false
```

---

## 6. Practical Guidelines

* **To read numbers from strings** → use `Number.parseFloat()`.
* **To check if a value is a number** → use `Number.isFinite()`.
* Use `Number.isInteger()` only when you specifically need integers.
* Avoid relying on `isNaN()` for general checks.

