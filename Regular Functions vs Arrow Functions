Regular Functions vs Arrow Functions

JavaScript provides two main ways to define functions: regular functions and arrow functions (introduced in ES6). Though similar, they behave differently in key areas.


---

1. Syntax

Regular Function:


function greet(name) {
  return "Hello " + name;
}

Arrow Function:


const greet = (name) => "Hello " + name;

Arrow functions offer a shorter and cleaner syntax, especially for one-liners.


---

2. this Binding

Regular Functions have their own this, which refers to the object that called the function.

Arrow Functions do not have their own this. They inherit this from their lexical (surrounding) scope.


const person = {
  name: "Praptee",
  greet: function () {
    console.log(this.name); // Praptee (works)
  },
};
const person2 = {
  name: "Praptee",
  greet: () => {
    console.log(this.name); // undefined (lexical this)
  },
};


---

3. Usage as Methods

Arrow functions are not suitable for object methods or constructors because of the this behavior.

const obj = {
  value: 10,
  show: () => {
    console.log(this.value); // undefined
  },
};


---

4. arguments Object

Regular Functions have access to the arguments object (all passed arguments).

Arrow Functions do not have their own arguments.



---

5. Constructor Usage

Regular Functions can be used as constructors with new.

Arrow Functions cannot be used as constructors.


