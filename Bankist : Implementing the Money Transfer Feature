Bankist : Implementing the Money Transfer Feature in the Bankist App

## 1. Feature Goal

* Allow logged-in users to **transfer money** to another user by:

  * Entering the recipient’s **username**.
  * Entering the **amount**.
* After transfer:

  * Sender’s balance decreases.
  * Recipient’s balance increases.
  * UI updates with new movements, balance, and summary.

---

## 2. DOM Elements Involved

* **Inputs**:

  * `inputTransferTo` → recipient username.
  * `inputTransferAmount` → transfer amount.
* **Button**:

  * `btnTransfer` → triggers the transfer.

---

## 3. Event Listener Setup

* Transfer form is also inside a **form element** → need to prevent default reload.

```js
btnTransfer.addEventListener('click', function (e) {
  e.preventDefault();
  // Logic goes here
});
```

---

## 4. Reading Input Data

* Get the transfer amount and convert it to number:

  ```js
  const amount = Number(inputTransferAmount.value);
  ```
* Get the receiver’s username and find the corresponding account object:

  ```js
  const receiverAcc = accounts.find(
    acc => acc.username === inputTransferTo.value
  );
  ```

---

## 5. Validation Conditions

Transfer is only valid if:

1. **Amount > 0** (cannot send negative or zero).
2. **Sender has enough balance** (`currentAccount.balance >= amount`).
3. **Receiver account exists**.
4. **Receiver is not the same as sender** (`receiverAcc?.username !== currentAccount.username`).

If all conditions hold → proceed with transfer.

---

## 6. Executing the Transfer

* Add new movement entries:

  ```js
  currentAccount.movements.push(-amount);   // Deduct from sender
  receiverAcc.movements.push(amount);       // Add to receiver
  ```
* Update UI:

  ```js
  updateUI(currentAccount);
  ```

---

## 7. Updating Balance Storage

* **Balance was previously only displayed**, not stored.
* Now, update the `calcDisplayBalance` function:

  ```js
  const calcDisplayBalance = function (acc) {
    acc.balance = acc.movements.reduce((sum, mov) => sum + mov, 0);
    labelBalance.textContent = `${acc.balance}€`;
  };
  ```
* This ensures each account object has a `.balance` property for future checks.

---

## 8. Updating the UI

* Refactor repeated UI update code into one function:

  ```js
  const updateUI = function (acc) {
    displayMovements(acc.movements);
    calcDisplayBalance(acc);
    calcDisplaySummary(acc);
  };
  ```
* Now can call `updateUI(currentAccount)` whenever necessary.

---

## 9. Clearing Inputs

* Clear transfer form fields after attempt:

  ```js
  inputTransferAmount.value = inputTransferTo.value = '';
  inputTransferAmount.blur();
  ```

---

## 10. Key Concepts Applied

* **Event handling** with `click`.
* **Form default prevention** with `preventDefault()`.
* **Finding accounts** with `find()`.
* **Validations** to prevent invalid transfers.
* **Updating account objects** by pushing new movements.
* **Balance persistence** by adding `.balance` property to account objects.
* **Refactoring** into an `updateUI()` helper to avoid code duplication.
* **Memory reference behavior**: passing objects around means updates persist across references (`currentAccount`, `account1`, etc., all point to the same object in memory).

---

## 11. Flow of Transfer Feature

1. User inputs **recipient username** and **amount**.
2. On click:

   * Inputs are read.
   * Receiver account is located.
   * Validations are checked.
3. If valid:

   * Movement deducted from sender.
   * Movement credited to receiver.
   * Balance recalculated and saved.
   * UI updated dynamically.
4. Inputs cleared for better UX.

---

## 12. Takeaways

* Transfer feature simulates **real banking rules**:

  * No overdrafts.
  * No self-transfers.
  * Receiver must exist.
* Accounts become **stateful** with stored balances, not just UI-rendered values.
* The app now supports **interactive transactions between multiple users**.
