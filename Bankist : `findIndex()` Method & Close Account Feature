Bankist : `findIndex()` Method & Close Account Feature

## 1. Introduction to `findIndex()`

* `findIndex()` is similar to `find()`.
* Difference:

  * **`find()`** → returns the first element that matches a condition.
  * **`findIndex()`** → returns the **index** of the first element that matches a condition.
* Useful when you need the **position** of an element in an array (e.g., for deletion).

---

## 2. Use Case in Bankist App: Close Account Feature

* Closing an account = **remove account object from the accounts array**.
* Example: If Sarah closes her account, her account object is removed from `accounts`.
* To delete from an array → use `splice(index, 1)`.
* To get index of the account → use `findIndex()`.

---

## 3. Event Listener for Close Button

```js
btnClose.addEventListener('click', function (e) {
  e.preventDefault();
  // Logic for account closure
});
```

* Prevents default form submission (page reload).
* Triggered when user clicks “Close Account”.

---

## 4. Credential Validation Before Deletion

User must re-enter **username** and **PIN**.

* Conditions:

  ```js
  if (
    inputCloseUsername.value === currentAccount.username &&
    Number(inputClosePin.value) === currentAccount.pin
  ) {
    // Proceed with deletion
  }
  ```
* Ensures **only the logged-in user can close their own account**.

---

## 5. Finding the Account Index

```js
const index = accounts.findIndex(
  acc => acc.username === currentAccount.username
);
```

* Loops through `accounts`.
* Returns the index of the account that matches the current user.

---

## 6. Deleting the Account

```js
accounts.splice(index, 1);
```

* Removes exactly **one element** at the found index.
* `splice()` mutates the array directly (no need to store return value).

---

## 7. Logging Out the User After Deletion

* Once account is deleted → UI should be hidden.
* Hide UI similar to login logic:

  ```js
  containerApp.style.opacity = 0;
  ```
* Prevents interaction with a deleted account.

---

## 8. Clearing Input Fields

After closing, reset input fields:

```js
inputCloseUsername.value = inputClosePin.value = '';
```

* Must be placed **after the if-statement** (to avoid erasing inputs before validation).

---

## 9. Key Concepts Compared

* **`find()`** → gets an element.
* **`findIndex()`** → gets the index.
* **`indexOf()`** → similar but only works with primitive values.

  * Example: `arr.indexOf(23)` works if `23` exists.
  * Cannot use conditions with `indexOf`.
  * `findIndex()` allows complex conditions.

---

## 10. Additional Notes

* Both `find()` and `findIndex()` callbacks receive:

  * Current element.
  * Current index.
  * Entire array.
  * (Though index/array parameters are rarely needed in practice).
* Introduced in **ES6 (2015)** → not supported in very old browsers.

---

## 11. Flow of Close Account Feature

1. User inputs username + PIN.
2. Clicks “Close Account”.
3. Code checks if input matches the logged-in account.
4. If valid:

   * `findIndex()` locates account in `accounts` array.
   * `splice()` removes it.
   * UI hidden to simulate logout.
   * Input fields cleared.
5. If invalid: nothing happens.

---

## 12. Takeaways

* `findIndex()` is essential when working with arrays that require **element removal**.
* Ensures safer operations compared to `indexOf` because you can define **custom conditions**.
* Closing account demonstrates **real-life banking rules** (security check + removal).
