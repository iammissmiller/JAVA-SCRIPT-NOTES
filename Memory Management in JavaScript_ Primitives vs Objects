
Memory Management in JavaScript: Primitives vs Objects

JavaScript handles memory automatically using Garbage Collection (GC), but understanding how memory is managed for primitives and objects helps write efficient code.


---

1. Primitives

Primitives are basic data types:

string

number

boolean

null

undefined

symbol

bigint


Memory Characteristics:

Stored directly in the stack (small and fixed size).

Passed by value (a copy is made when assigned or passed).


let a = 10;
let b = a;
b = 20;
console.log(a); // 10 (original not affected)

Each variable has its own separate copy of the value.


---

2. Objects

Objects include:

Arrays

Functions

Dates

Custom objects


Memory Characteristics:

Stored in the heap (used for larger, complex data).

Variables store only a reference (pointer) to the memory location.

Passed by reference (changes affect all references).


let obj1 = { name: "Praptee" };
let obj2 = obj1;
obj2.name = "Miller";
console.log(obj1.name); // Miller (both refer to same object)


---

3. Garbage Collection

JavaScript uses automatic garbage collection (typically mark-and-sweep) to free memory thatâ€™s no longer reachable.

If no reference exists to a value/object, it's garbage collected.

Circular references inside objects may cause memory leaks if not handled properly.

